// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fixtures > async > stdout 1`] = `"works"`;

exports[`fixtures > circular > stdout 1`] = `"FooBar"`;

exports[`fixtures > env > stdout 1`] = `"process.env.TEST true"`;

exports[`fixtures > error-parse > stderr 1`] = `
"<root>/src/index.ts:5
  throw err; /* ↓ Check stack trace ↓ */
  ^

Error: undefined: Expected string token at the end of import statement. 
 <cwd>/index.ts
    at Object.<anonymous> (<root>/bin/kazuya)
    at Module._compile (internal/modules/cjs/loader)
    at Module._extensions..js (internal/modules/cjs/loader)
    at Module.load (internal/modules/cjs/loader)
    at Module._load (internal/modules/cjs/loader)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main)
    at internal/main/run_main_module

Node.js v18.15.0"
`;

exports[`fixtures > error-parse > stdout 1`] = `""`;

exports[`fixtures > error-runtime > stderr 1`] = `
"<root>/src/index.ts:5
  throw err; /* ↓ Check stack trace ↓ */
  ^

TypeError [ERR_INVALID_ARG_TYPE]: The \\"listener\\" argument must be of type function. Received undefined
    at checkListener (events)
    at _addListener (events)
    at process.addListener (events)
    at <cwd>/index.ts
    at kazuya (<root>/src/kazuya.ts)
    at Object.<anonymous> (<root>/bin/kazuya)
    at Module._compile (internal/modules/cjs/loader)
    at Module._extensions..js (internal/modules/cjs/loader)
    at Module.load (internal/modules/cjs/loader)
    at Module._load (internal/modules/cjs/loader) {
  code: 'ERR_INVALID_ARG_TYPE'
}

Node.js v18.15.0"
`;

exports[`fixtures > error-runtime > stdout 1`] = `""`;

exports[`fixtures > esm > stdout 1`] = `
"{ utilsLib: { version: '123', utils: { a: 'a', default: 'default' } } }
{
  file: '<cwd>/test.js',
  dir: '<cwd>',
  stack: [
    'at getStack (<cwd>/test)',
    'at test (<cwd>/test)',
    'at <cwd>/index.js',
    'at kazuya (<root>/src/kazuya.ts)',
    'at Object.<anonymous> (<root>/bin/kazuya)',
    'at Module._compile (internal/modules/cjs/loader)',
    'at Module._extensions..js (internal/modules/cjs/loader)',
    'at Module.load (internal/modules/cjs/loader)',
    'at Module._load (internal/modules/cjs/loader)',
    'at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main)'
  ]
}"
`;

exports[`fixtures > exotic > stdout 1`] = `
"Typescript: true
Config: true"
`;

exports[`fixtures > hashbang > stdout 1`] = `"1"`;

exports[`fixtures > import-map > stdout 1`] = `"{ alias: 'alias' }"`;

exports[`fixtures > json > stdout 1`] = `
"Imported : { test: 123 } .default: { test: 123 }
Imported with assertion : { test: 123 } .default: { test: 123 }
Required : { test: 123 } .default: { test: 123 }
Dynamic Imported : { test: 123, default: { test: 123 } } .default: { test: 123 }"
`;

exports[`fixtures > mixed > stdout 1`] = `"Mixed works for: <cwd>"`;

exports[`fixtures > native > stdout 1`] = `"[Module: null prototype] { default: { hasRequire: false } }"`;

exports[`fixtures > proto > stdout 1`] = `"exists: true"`;

exports[`fixtures > pure-esm-dep > stdout 1`] = `
"Enter Program
Enter VariableDeclaration
Enter VariableDeclarator
Enter Identifier
Enter Literal"
`;

exports[`fixtures > syntax > stdout 1`] = `
"Optional chaining: undefined
Nullish coalescing: 0
Logical or assignment: 50 title is empty.
Logical nullish assignment: 50 20"
`;

exports[`fixtures > typescript > stdout 1`] = `
"{
  satisfiesTest: {
    firstTest: { name: 'first', avatar: 'https://example.com/first.png' },
    secondTest: { name: 'second', avatar: [Object] },
    normalizeUserEntity: [Function: normalizeUserEntity]
  }
}
child"
`;
